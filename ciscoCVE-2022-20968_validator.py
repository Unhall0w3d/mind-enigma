#!/usr/var/python
# -*- code:UTF-8 -*-

#####################################
# Script created by Ken Perry, 2020 #
#       NOC THOUGHTS BLOG           #
#    https://www.nocthoughts.com    #
#####################################

import xml.etree.ElementTree as ET

import requests
import urllib3
import xml.dom.minidom
from getpass import getpass

# Define disablement of HTTPS Insecure Request error message.
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def infocollect():
    # Define user input required for script; pub ip, username, pw.
    cucmipaddr = str(input('What is the target UC Server Pub IP?: '))
    print('Supported SQL DB Versions: 12.5 | 12.0 | 11.5 | 11.0 | 10.5 | 10.0 | 9.1 | 9.0')
    cucmversion = str(input('What version is the UC Server? (e.g. 12.5): '))
    cucmusername = str(input('What is the GUI Username?: '))
    cucmpassword = getpass('What is the GUI Password?: ')
    try:
        r = requests.get('https://' + cucmipaddr + '/axl', auth=(cucmusername, cucmpassword), verify=False)
        if r.status_code == 401:
            print('AXL Interface is unreachable. Please check connectivity at https://<ucm-ip>/axl.')
            print('Ensure the credentials and version info is correct.')
            print('Script Exiting.')
            exit()
        elif r.status_code == 200:
            return cucmipaddr, cucmversion, cucmpassword, cucmusername
    except Exception as e:
        print(e)
        exit()


def devcheck(cucmipaddr, cucmversion, cucmpassword, cucmusername):
    # URL to hit for request against axl
    url = ('https://' + cucmipaddr + '/axl/')
    # Payload to send; soap envelope
    payload = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" " \
              "xmlns:ns=\"http://www.cisco.com/AXL/API/" + cucmversion + "\">\n<!--Pulls devices configured in " \
                                                                         "UCM cluster-->\n   " \
              "<soapenv:Header/>\n   <soapenv:Body>\n      <ns:executeSQLQuery sequence=\"\">\n         <sql>\n       " \
              "     SELECT e.userid, cd.timelastaccessed\n            " \
              "FROM enduser as e, credentialdynamic as cd, credential as cr\n          " \
              "  WHERE e.pkid=cr.fkenduser and e.tkuserprofile=1 and e.primarynodeid is not null and " \
              "cr.tkcredential=3 and cr.pkid=cd.fkcredential\n            ORDER by cd.timelastaccessed\n       " \
              "  </sql>\n      </ns:executeSQLQuery>\n   </soapenv:Body>\n</soapenv:Envelope>"
    # Header content, define db version and execute an SQL Query
    headers = {
        'SOAPAction': 'CUCM:DB ver=' + cucmversion + ' executeSQLQuery',
        'Content-Type': 'text/plain'
    }
    print()
    print('Collecting Data...')
    print()
    # Here's where we send a POST message out to CUCM, we don't verify certificates.
    response = requests.request("POST", url, headers=headers, data=payload, auth=(cucmusername, cucmpassword), verify=False)
    uglyxml = response.text.encode('utf8')
    xmldata = xml.dom.minidom.parseString(uglyxml)
    xml_pretty_str = xmldata.toprettyxml()
    root = ET.fromstring(xml_pretty_str)
    print('Printing Root Tag & Attrib')
    print(root.tag)
    print(root.attrib)
    exit()


infocollect()
cucmipaddr, cucmversion, cucmpassword, cucmusername = infocollect()
devcheck(cucmipaddr, cucmversion, cucmpassword, cucmusername)
exit()
