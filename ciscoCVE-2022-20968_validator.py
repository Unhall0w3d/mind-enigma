#!/usr/var/python
# -*- code:UTF-8 -*-

#####################################
# Script created by Ken Perry, 2022 #
#       NOC THOUGHTS BLOG           #
#    https://www.nocthoughts.com    #
#####################################

import xml.etree.ElementTree as ET
import requests
import urllib3
import xml.dom.minidom
from getpass import getpass

# Define disablement of HTTPS Insecure Request error message.
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def infocollect():
    # Define user input required for script; pub ip, username, pw.
    cucmipaddr = str(input('What is the target UC Server Pub IP?: '))
    print('Supported SQL DB Versions: 12.5 | 12.0 | 11.5 | 11.0 | 10.5 | 10.0 | 9.1 | 9.0')
    cucmversion = str(input('What version is the UC Server? (e.g. 12.5): '))
    cucmusername = str(input('What is the GUI Username?: '))
    cucmpassword = getpass('What is the GUI Password?: ')
    try:
        r = requests.get('https://' + cucmipaddr + '/axl', auth=(cucmusername, cucmpassword), verify=False)
        if r.status_code == 401:
            print('AXL Interface is unreachable. Please check connectivity at https://<ucm-ip>/axl.')
            print('Ensure the credentials and version info is correct.')
            print('Script Exiting.')
            exit()
        elif r.status_code == 200:
            return cucmipaddr, cucmversion, cucmpassword, cucmusername
    except Exception as e:
        print(e)
        exit()


def devcheck(cucmipaddr, cucmversion, cucmpassword, cucmusername):
    # URL to hit for request against axl
    url = ('https://' + cucmipaddr + '/axl/')
    # Payload to send; soap envelope
    payload = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" " \
              "xmlns:ns=\"http://www.cisco.com/AXL/API/" + cucmversion + "\">\n   <soapenv:Header/>\n  " \
                                                                         " <soapenv:Body>\n    " \
              "  <ns:executeSQLQuery sequence=\"\">\n         <sql>\n           " \
              " SELECT count(d.tkmodel), tp.name as phonemodel, defaults.tkdeviceprotocol as protocol," \
              " defaults.loadinformation as defaultfw\n            FROM device as d\n         " \
              "   INNER JOIN typeproduct as tp on d.tkmodel=tp.tkmodel\n          " \
              "  INNER JOIN defaults on tp.tkmodel=defaults.tkmodel where d.name like '%' and defaults.loadinformation" \
              " != \"\" and tp.name like 'Cisco 78%' or tp.name like 'Cisco 88%'\n       " \
              "     GROUP BY d.tkmodel, tp.name, defaults.loadinformation, defaults.tkdeviceprotocol\n     " \
              "    </sql>\n      </ns:executeSQLQuery>\n   </soapenv:Body>\n</soapenv:Envelope>"
    # Header content, define db version and execute an SQL Query
    headers = {
        'SOAPAction': 'CUCM:DB ver=' + cucmversion + ' executeSQLQuery',
        'Content-Type': 'text/plain'
    }
    print()
    print('Collecting Data...')
    print()
    # Here's where we send a POST message out to CUCM, we don't verify certificates.
    response = requests.request("POST", url, headers=headers, data=payload, auth=(cucmusername, cucmpassword), verify=False)
    uglyxml = response.text.encode('utf8')
    xmldata = xml.dom.minidom.parseString(uglyxml)
    xmlpretty = xmldata.toprettyxml()
    root = ET.fromstring(xmlpretty)
    # Test if valid returns are found
    element = root.find('.//row')
    if element is None:
        print("No phones found matching 78xx or 88xx model.")
        print("This likely indicates you are not running 78XX or 88XX models in your environment.")
        print("Please manually validate by searching under Device > Phone by Device Type.")
        exit()
    print("Affected phone models have been found. Please see the list below.")
    print("_________________________________________________________________")
    for child in root.findall('.//row'):
        model = child.find('phonemodel').text
        count = child.find('count').text
        print(model, count)
    print("Please see the following PSIRT link for Cisco BUG ID, Workaround, and Resolution steps.")
    print("https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-ipp-oobwrite-8cMF5r7U")
    exit()


try:
    cucmipaddr, cucmversion, cucmpassword, cucmusername = infocollect()
    devcheck(cucmipaddr, cucmversion, cucmpassword, cucmusername)
    exit()
except Exception as e:
    print("We've hit an exception. Please report exception details and run scenario to script dev.")
    print(e)
    exit()
